<template>
    Hello, {greeting}!
</template>


import { LightningElement } from 'lwc';

export default class Hello extends LightningElement {
    greeting = 'World';
}

=====================================

<template>
    <p>Hello, {greeting}!</p>
    <lightning-input label="Name" value={greeting} onchange={handleChange}></lightning-input>
</template>



import { LightningElement, track } from 'lwc';

export default class HelloBinding extends LightningElement {
    @track greeting = 'World';

    handleChange(event) {
        this.greeting = event.target.value;
    }
}


=========================================

Getter methods are used to compute the value for any property. It's similar to getters in VF page. 
Similarly 
Avoid computing on html side.. do it on js.. 

<template>
    <div class="slds-m-around_medium">
        <lightning-input name='firstName' label="First Name" onchange={handleChange}></lightning-input>
        <lightning-input name='lastName' label="Last Name" onchange={handleChange}></lightning-input>
        <p class="slds-m-top_medium">Uppercased Full Name: {uppercasedFullName}</p>
    </div>
</template>



import { LightningElement, track } from 'lwc';

export default class HelloExpressions extends LightningElement {
    @track fName = '';
    @track lName = '';

    handleChange(event) {
        const field = event.target.name;
        if (field === 'firstName') {
            this.fName = event.target.value;
        } else if (field === 'lastName') {
            this.lName = event.target.value;
        }
    }

    get uppercasedFullName() {
        return `${this.fName} ${this.lName}`.toUpperCase();
    }
}


===============================================

Similar to aura:if in Aura component we have <template if:true....

<template>
    <div class="slds-m-around_medium">
        <lightning-input name='firstName' label="First Name" onchange={handleChange}></lightning-input>
        <lightning-input name='lastName' label="Last Name" onchange={handleChange}></lightning-input>
        <lightning-input type="checkbox" label="To Upper" onchange={show}></lightning-input>
        <template if:true={showInUpperCase}>
            <p class="slds-m-top_medium">Full Name: {uppercasedFullName}</p>
        </template>

        <template if:false={showInUpperCase}>
            <p class="slds-m-top_medium">Full Name: {fName} {lName}</p>
        </template>
    </div>
</template>



import { LightningElement, track } from 'lwc';

export default class HelloExpressions extends LightningElement {
    @track fName = '';
    @track lName = '';
    @track showInUpperCase = false;
    @track uppercasedFullName;
    handleChange(event) {
        const field = event.target.name;
        if (field === 'firstName') {
            this.fName = event.target.value;
        } else if (field === 'lastName') {
            this.lName = event.target.value;
        }
    }


    show(event) {
        this.showInUpperCase = event.target.checked; 
        console.log(event.target.checked);
        if(event.target.checked) {
            this.uppercasedFullName = `${this.fName} ${this.lName}`.toUpperCase();
        } else {
            this.uppercasedFullName = `${this.fName} ${this.lName}`;
        }
    }
    
}


====================================

Looping using for:each 

<template>
    <lightning-card title="HelloForEach" icon-name="custom:custom14">
        <ul class="slds-m-around_medium">
            <template for:each={contacts} for:item="contact">
                <li key={contact.Id}>
                    {contact.Name}, {contact.Title}
                </li>
            </template>
        </ul>
    </lightning-card>
</template>


import { LightningElement, track } from 'lwc';
export default class HelloForEach extends LightningElement {
    contacts = [
        {
            Id: 1,
            Name: 'Amy Taylor',
            Title: 'VP of Engineering',
        },
        {
            Id: 2,
            Name: 'Michael Jones',
            Title: 'VP of Sales',
        },
        {
            Id: 3,
            Name: 'Jennifer Wu',
            Title: 'CEO',
        },
    ];
}


==================================
Looping using iterator

<template>
    <lightning-card title="HelloIterator" icon-name="custom:custom14">
        <ul class="slds-m-around_medium">
            <template iterator:it={contacts}>
                <li key={it.value.Id}>
                    <div if:true={it.first} class="list-first"></div>
                    {it.value.Name}, {it.value.Title}
                    <div if:true={it.last} class="list-last"></div>
                </li>
            </template>
        </ul>
    </lightning-card>
</template>

--------------------------

import { LightningElement, track } from 'lwc';
export default class HelloForEach extends LightningElement {
    contacts = [
        {
            Id: 1,
            Name: 'Amy Taylor',
            Title: 'VP of Engineering',
        },
        {
            Id: 2,
            Name: 'Michael Jones',
            Title: 'VP of Sales',
        },
        {
            Id: 3,
            Name: 'Jennifer Wu',
            Title: 'CEO',
        },
    ];
}

--------------------------

.list-first {
    border-top: 1px solid black;
    padding-top: 5px;
}

.list-last {
    border-bottom: 1px solid black;
    padding-bottom: 5px;
}

===================================

<!-- chartBar.html -->
<template>
    <div class="container">
        <lightning-layout vertical-align="center">
            <lightning-layout-item>
                {percentage}%
            </lightning-layout-item>
            <lightning-layout-item flexibility="grow">
                <div class="bar" style={style}></div>
            </lightning-layout-item>
        </lightning-layout>
    </div>
</template>



import { LightningElement, api } from 'lwc';
export default class ChartBar extends LightningElement {
    @api percentage;

    get style() {
        return `width: ${this.percentage}%`;
    }
}



.container {
    overflow: hidden;
    color: #F5B041;
}

.bar {
    margin-left: 4px;
    height: 36px;
    background-color: #F5B041;
}


--------------------------

<!-- apiProperty.html -->
<template>
    <lightning-input label="Percentage" type="number" min="0" max="100"
        value={percentage} onchange={handlePercentageChange}></lightning-input>
    <c-chart-bar percentage={percentage}></c-chart-bar>
</template>



import { LightningElement, track } from 'lwc';
export default class ApiProperty extends LightningElement {
    @track percentage = 50;

    handlePercentageChange(event) {
        this.percentage = event.target.value;
    }
}

=======================================

